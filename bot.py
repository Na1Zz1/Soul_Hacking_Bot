import os
import logging
from dotenv import load_dotenv
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
MANAGER_ID = int(os.getenv("MANAGER_ID"))

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)

PDF_FILES = {
    "mass": "massa.pdf",
    "weightloss": "weightloss.pdf"
}

# =========================
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =========================
logging.basicConfig(level=logging.INFO)

# =========================
# üîπ –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
# =========================
async def safe_delete_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.callback_query.message.delete()
    except Exception:
        pass

# =========================
# üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# =========================
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üéÅ –ü–û–õ–£–ß–ò–¢–¨ –ü–†–û–ë–ù–´–ï –ü–†–û–ì–†–ê–ú–ú–´", callback_data="trial_plan")],
        [InlineKeyboardButton("üí™ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="buy_program")],
        [InlineKeyboardButton("üîí –í—Ö–æ–¥ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π Telegram-–∫–∞–Ω–∞–ª", callback_data="private_channel")],
        [InlineKeyboardButton("üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —Å–ø–æ—Ä—Ç—Å–º–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç Soul Hacking Club.\n \n"
        "–ó–¥–µ—Å—å –º—ã –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ç–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –≤ —á–µ—Ç–∫–∏–π –∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–ª–∞–Ω.\n \n"
        "üéØ –ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å?\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: –ü–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–æ–¥ —Ç–≤–æ–∏ —Ü–µ–ª–∏ (–º–∞—Å—Å–∞, —Ä–µ–ª—å–µ—Ñ, —Å–∏–ª–∞, –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å).\n"
        '‚Ä¢ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –±–∞–∑—É: –ù–µ –ø—Ä–æ—Å—Ç–æ "–¥–µ–ª–∞–π —Ç–∞–∫", –∞ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∏ –º–µ—Ç–æ–¥–∏–∫–∞–º.\n'
        "‚Ä¢ –°—Ç–∞—Ä—Ç –±–µ–∑ —Ä–∏—Å–∫–∞: –ü–æ–ª—É—á–∏ –ø—Ä–æ–±–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –Ω–∞—à –ø–æ–¥—Ö–æ–¥.\n \n"
        "üëá –í—ã–±–∏—Ä–∞–π, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å:",
        reply_markup=main_menu_keyboard()
    )

# =========================
# üîπ –ü—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω
# =========================
async def trial_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_delete_message(update, context)
    keyboard = [
        [InlineKeyboardButton("üí™ –ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É", callback_data="goal_massa")],
        [InlineKeyboardButton("üî• –°–±—Ä–æ—Å–∏—Ç—å –ª–∏—à–Ω–∏–π –≤–µ—Å", callback_data="goal_weightloss")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# =========================
# üîπ –í—ã–±–æ—Ä —Ü–µ–ª–∏
# =========================
async def goal_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_delete_message(update, context)
    query = update.callback_query
    goal = query.data.replace("goal_", "")
    context.user_data["goal"] = goal

    keyboard = [
        [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=f"https://t.me/{CHANNEL_ID[1:]}")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="trial_plan")]
    ]
    await query.message.reply_text(
        f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω:\n{CHANNEL_ID}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# =========================
# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤—ã–¥–∞—á–∞ PDF
# =========================
async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    goal = context.user_data.get("goal")

    caption = "‚úÖ –¢–≤–æ–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤! üí™"  # –≤—Å–µ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞

    try:
        member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        if member.status in ["member", "administrator", "creator"]:
            file_path = PDF_FILES.get(goal)
            if file_path and os.path.exists(file_path):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                buttons_message = query.message

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Å caption
                with open(file_path, "rb") as f:
                    await query.message.reply_document(InputFile(f, filename=os.path.basename(file_path)), caption=caption)

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                try:
                    await buttons_message.delete()
                except:
                    pass

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ PDF
                await query.message.reply_text(
                    "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=main_menu_keyboard()
                )
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                await query.message.reply_text("‚ùå –§–∞–π–ª –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_keyboard())
        else:
            await query.message.reply_text("‚ùå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω.", reply_markup=main_menu_keyboard())
    except Exception as e:
        await query.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}", reply_markup=main_menu_keyboard())

# =========================
# üîπ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
# =========================
async def buy_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_delete_message(update, context)
    keyboard = [
        [InlineKeyboardButton("üí≥ –ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (450 —Ä—É–±.)", url="https://t.me/tribute/app?startapp=plQZ")],
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="buy_feedback")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    message_text = (
       "–ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê –¢–†–ï–ù–ò–†–û–í–û–öüî•\n \n"

        "üìÑ–ü–æ–ª—É—á–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–¥ —Ç–≤–æ–∏ —Ü–µ–ª–∏, —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è ‚Äî –¥–æ–º–∞—à–Ω–∏–µ –∏–ª–∏ –∑–∞–ª.\n \n"

        "üìã –í –ü–†–û–ì–†–ê–ú–ú–ï –ë–£–î–ï–¢ –£–ß–¢–ï–ù–û:\n"
        "‚Äî –≤–µ—Å, —Ä–æ—Å—Ç –∏ –ø–æ–ª,\n"
        "‚Äî —Ü–µ–ª—å (–ø–æ—Ö—É–¥–µ–Ω–∏–µ/–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã/—Ä–µ–ª—å–µ—Ñ),\n"
        "‚Äî —Ç—Ä–∞–≤–º—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è,\n"
        "‚Äî —á–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é,\n"
        "‚Äî –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (—á—Ç–æ –µ—Å—Ç—å —É —Ç–µ–±—è –¥–æ–º–∞ / –≤ –∑–∞–ª–µ),\n"
        "‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é.\n \n"

        "üí∏–°–¢–û–ò–ú–û–°–¢–¨ –î–û–°–¢–£–ü–ê: 4Ô∏è‚É£5Ô∏è‚É£0Ô∏è‚É£ —Ä—É–±\n"
        "‚ùóÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞—à username –≤ Telegram, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."
    )
    await update.callback_query.message.reply_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# =========================
# üîπ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
# =========================

async def buy_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_delete_message(update, context)
    context.user_data["awaiting_buy_feedback"] = True

    keyboard = [
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]

    await update.callback_query.message.reply_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# =========================
# üîπ –í—Ö–æ–¥ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª
# =========================
async def private_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_delete_message(update, context)
    keyboard = [
        [InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è (100 —Ä—É–±.)", url="https://t.me/tribute/app?startapp=sE8y")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    await update.callback_query.message.reply_text(
        '<b>–ó–ê–ö–†–´–¢–´–ô –ö–ê–ù–ê–õ SOUL HACKING CLUBüîí\n \n‚õîÔ∏è –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –≥–¥–µ –µ—Å—Ç—å –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ:\n‚Äî –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫,\n‚Äî –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä/—Å—É—à–∫—É, –ö–ë–ñ–£,\n‚Äî –¥–æ–±–∞–≤–∫–∏ –∏ –ë–ê–î—ã,\n ‚Äî —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–∏—Ñ—ã,\n ‚Äî –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É,\n ‚Äî —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é,\n‚Äî —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ.\n \nüí∏–°–¢–û–ò–ú–û–°–¢–¨ –î–û–°–¢–£–ü–ê: 1Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£ —Ä—É–±.\n‚ùóÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä–æ–µ—Ç —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.</b>',
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# =========================
# üîπ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
# =========================
async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_delete_message(update, context)
    keyboard = [
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    await update.callback_query.message.reply_text(
        "–ú–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ. –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –æ–∫–æ–ª–æ 15-30 –º–∏–Ω—É—Ç. üí¨",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data["awaiting_feedback"] = True

async def handle_feedback_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.message.from_user
        text = update.message.text

        if context.user_data.get("awaiting_feedback") or context.user_data.get("awaiting_buy_feedback"):
            await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            await context.bot.send_message(
                MANAGER_ID,
                f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (@{user.username}):\n\n{text}"
        )
        context.user_data["awaiting_feedback"] = False
        context.user_data["awaiting_buy_feedback"] = False

# =========================
# üîπ –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
# =========================
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_delete_message(update, context)
    await update.callback_query.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )

# =========================
# üîπ MAIN
# =========================
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(trial_plan, pattern="trial_plan"))
    app.add_handler(CallbackQueryHandler(goal_selection, pattern="goal_"))
    app.add_handler(CallbackQueryHandler(check_subscription, pattern="check_subscription"))
    app.add_handler(CallbackQueryHandler(buy_program, pattern="buy_program"))
    app.add_handler(CallbackQueryHandler(private_channel, pattern="private_channel"))
    app.add_handler(CallbackQueryHandler(feedback, pattern="feedback"))
    app.add_handler(CallbackQueryHandler(buy_feedback, pattern="buy_feedback"))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern="back_to_menu"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_feedback_message))

    app.run_polling()

if __name__ == "__main__":
    main()
